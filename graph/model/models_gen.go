// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Image struct {
	ID        string         `json:"ID"`
	URL       string         `json:"url"`
	Tags      []string       `json:"tags"`
	Tagstring string         `json:"tagstring"`
	Rating    Rating         `json:"rating"`
	Added     string         `json:"added"`
	Phash     string         `json:"phash"`
	Size      int            `json:"size"`
	Width     int            `json:"width"`
	Height    int            `json:"height"`
	Filename  string         `json:"filename"`
	Related   []*NestedImage `json:"related"`
}

type NestedImage struct {
	ID        string   `json:"ID"`
	URL       string   `json:"url"`
	Tags      []string `json:"tags"`
	Tagstring string   `json:"tagstring"`
	Rating    Rating   `json:"rating"`
	Added     string   `json:"added"`
	Phash     string   `json:"phash"`
	Size      int      `json:"size"`
	Width     int      `json:"width"`
	Height    int      `json:"height"`
	Filename  string   `json:"filename"`
}

type Rating string

const (
	RatingExplicit     Rating = "explicit"
	RatingQuestionable Rating = "questionable"
	RatingSafe         Rating = "safe"
	RatingGeneral      Rating = "general"
)

var AllRating = []Rating{
	RatingExplicit,
	RatingQuestionable,
	RatingSafe,
	RatingGeneral,
}

func (e Rating) IsValid() bool {
	switch e {
	case RatingExplicit, RatingQuestionable, RatingSafe, RatingGeneral:
		return true
	}
	return false
}

func (e Rating) String() string {
	return string(e)
}

func (e *Rating) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Rating(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Rating", str)
	}
	return nil
}

func (e Rating) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
